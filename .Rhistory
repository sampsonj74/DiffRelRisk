library("devtools")
library("roxygen2")
setwd("H:/Projects/HPV/India/DiffRelRisk")
document()
setwd("H:/Projects/HPV/India/DiffRelRisk")
document()
install.packages("DiffRelRisk")
install.packages("DiffRelRisk")
DRRCI(x1=20,x2=50,x3=100,n1=1000,n2=1000,n3=1000)
library("DiffRelRisk")
DRRCI(x1=20,x2=50,x3=100,n1=1000,n2=1000,n3=1000)
install.packages("devtools")
#install.packages("roxygen2")
#install.packages("usethis")
library("devtools")
library("roxygen2")
#setwd("H:/Projects/HPV/India")
#create("DRR")
#note that this working directory was created using "Create Project" dropdown from File (otherwise won't recognize that this is intended
#to be an R pacakge)
setwd("H:/Projects/HPV/India/DiffRelRisk")
document()
allData <- list()
comp    <- matrix(1,nrow=1,ncol=720)
for (tc in 1:720){
aaa=try(load(paste0("Y:/Projects/HPV/India/output/theSim_",tc,".Rdat")))
if (class(aaa) != "try-error") allData[[tc]] <- sMat
if (class(aaa) == "try-error") allData[[tc]] <- comp[tc] <- 0
}
poss.r=poss.rA
poss.p3=poss.p3A
poss.p1=poss.p1A
np1=np1A
np2=np2A
np3=np3A
n1=n2=n3=100
naiveBounds    <- list()
newBounds      <- list()
bMat3          <- matrix(nrow=(np1*np2*np3),ncol=3)
ri             <- 0
for (i in 1:np1) for (j in 1:np2) for (k in 1:np3) {ri=ri+1
bMat3[ri,] <- c(poss.r[i],poss.p3[j],poss.p1[k])}
bMat2          <- bMat3[bMat3[,3]< bMat3[,2] & !(bMat3[,2]==0.3 & bMat3[,3]==0.2),]
topLine <- c("r","pa","p3","p1","p2","LB:Avg",    "LB:Med",    "P(LB>T)",   "UB: Avg",    "UB: Med",     "P(UB>T)",
"LB.LRT:Avg","LB.LRT:Med","P(LB.LRT>T)","UB.LRT: Avg","UB.LRT: Med","P(UB.LRT<T)",
"LB.Naive:Avg","LB.Naive:Med","P(LB.Naive>T)","UB.Naive: Avg","UB.Naive: Med","P(UB.Naive<T)",
"LB.unCond:Avg","LB.unCond:Med","P(LB.unCond>T)","UB.unCond: Avg","UB.unCond: Med","P(UB.unCond<T)",
"Power","Power.LRT","Power.unCond","Power-DiffProp")
outMat <- matrix(nrow=nrow(bMat2),ncol=length(topLine))
colnames(outMat) <- topLine
outMat[,c(1,3,4)] <- bMat2
outMat[,2]        <-  outMat[,4]+outMat[,1]*outMat[,3]/2
outMat[,5]        <-  outMat[,2]+outMat[,1]*outMat[,3]/2
bMat2
i=17
rok <- c(1:nrow(bMat))[bMat[,1] == bMat2[i,1] & bMat[,2] == bMat2[i,2] & bMat[,3] == bMat2[i,3] & comp == 1 & bMat[,5]==n1 & bMat[,6]==n2 & bMat[,7]==n3]
sMat2 <- allData[[rok[1]]]
for (j in 2:length(rok)) sMat2 <- rbind(sMat2,allData[[rok[j]]])
rok2 <- c(1:nrow(sMat2))[sMat2[,6]>3]
naive.LB <- n3*sMat2[rok2,7]/sMat2[rok2,6]
naive.UB <- n3*sMat2[rok2,8]/sMat2[rok2,6]
naiveBounds[[i]] <- cbind(naive.LB,naive.UB)
newBounds[[i]]  <- cbind(sMat2[rok2,2],sMat2[rok2,3])
sMat2[1:5,]
plot(sMat2[,3],sMat2[,10])
abline(0,1,col="red")
mean(sMat2[,3],na.rm=T)
mean(sMat2[,10],na.rm=T)
dif <- abs(sMat2[,10]-sMat[,3])
sum(dif > 0.1)
sum(dif > 0.1,na.rm=T)
hist(dif)
dif <- abs(sMat2[,10]-sMat2[,3])
hist(dif)
mean(dif)
mean(dif,na.rm=T)
mean(sMat2[,10],na.rm=T)
mean(sMat2[,3],na.rm=T)
miss=is.na(sMat2[,10]+sMat2[,3])
mean(sMat2[miss=0,3],na.rm=T)
mean(sMat2[miss==0,3],na.rm=T)
mean(sMat2[miss==0,3]<0.6,na.rm=T)
sMat2[1:10,]
table(sMat2[,4],is.na(sMat2[,10]))
i=129
poss.d[i] <- findR.int(r=poss.r[i],alpha2=alpha2,x1=x1,x2=x2,x3=x3,x4=x4,n1=n1,n2=n2,n3=n3,n4=n4,tr=tr,Z=Z,Y=Y,altParam=altParam,method.rr=method.rr,unCond=unCond)
poss.d[i]
getZ.OP(r=poss.r[i],x1,x2,x3,n1,n2,n3,altParam,unCond,forceRoot=1)
sv  <- startVals.OP(x1,x2,x3,n1,n2,n3,r)
sv2 <- opt.OP2(r,sv$t,sv$p3,x1,x2,x3,n1,n2,n3,forceRoot=forceRoot)
sv2
getZ2.OP2(sv2$t,sv2$p3,r,x1,x2,x3,n1,n2,n3,unCond)
i=130
poss.d[i] <- findR.int(r=poss.r[i],alpha2=alpha2,x1=x1,x2=x2,x3=x3,x4=x4,n1=n1,n2=n2,n3=n3,n4=n4,tr=tr,Z=Z,Y=Y,altParam=altParam,method.rr=method.rr,unCond=unCond)
poss.d[i]
allData <- list()
comp    <- matrix(1,nrow=1,ncol=720)
for (tc in 1:720){
aaa=try(load(paste0("Y:/Projects/HPV/India/output/theSim_",tc,".Rdat")))
if (class(aaa) != "try-error") allData[[tc]] <- sMat
if (class(aaa) == "try-error") allData[[tc]] <- comp[tc] <- 0
}
createOut      <- function(poss.r,poss.p3,poss.p1,np1,np2,np3,n1,n2,n3,allData,comp){
naiveBounds    <- list()
newBounds      <- list()
bMat3          <- matrix(nrow=(np1*np2*np3),ncol=3)
ri             <- 0
for (i in 1:np1) for (j in 1:np2) for (k in 1:np3) {ri=ri+1
bMat3[ri,] <- c(poss.r[i],poss.p3[j],poss.p1[k])}
bMat2          <- bMat3[bMat3[,3]< bMat3[,2] & !(bMat3[,2]==0.3 & bMat3[,3]==0.2),]
topLine <- c("r","pa","p3","p1","p2","LB:Avg",    "LB:Med",    "P(LB>T)",   "UB: Avg",    "UB: Med",     "P(UB>T)",
"LB.LRT:Avg","LB.LRT:Med","P(LB.LRT>T)","UB.LRT: Avg","UB.LRT: Med","P(UB.LRT<T)",
"LB.Naive:Avg","LB.Naive:Med","P(LB.Naive>T)","UB.Naive: Avg","UB.Naive: Med","P(UB.Naive<T)",
"LB.unCond:Avg","LB.unCond:Med","P(LB.unCond>T)","UB.unCond: Avg","UB.unCond: Med","P(UB.unCond<T)",
"Power","Power.LRT","Power.unCond","Power-DiffProp")
outMat <- matrix(nrow=nrow(bMat2),ncol=length(topLine))
colnames(outMat) <- topLine
outMat[,c(1,3,4)] <- bMat2
outMat[,2]        <-  outMat[,4]+outMat[,1]*outMat[,3]/2
outMat[,5]        <-  outMat[,2]+outMat[,1]*outMat[,3]/2
for (i in 1:nrow(bMat2)) {
rok <- c(1:nrow(bMat))[bMat[,1] == bMat2[i,1] & bMat[,2] == bMat2[i,2] & bMat[,3] == bMat2[i,3] & comp == 1 & bMat[,5]==n1 & bMat[,6]==n2 & bMat[,7]==n3]
sMat2 <- allData[[rok[1]]]
for (j in 2:length(rok)) sMat2 <- rbind(sMat2,allData[[rok[j]]])
rok2 <- c(1:nrow(sMat2))[sMat2[,6]>3]
naive.LB <- n3*sMat2[rok2,7]/sMat2[rok2,6]
naive.UB <- n3*sMat2[rok2,8]/sMat2[rok2,6]
naiveBounds[[i]] <- cbind(naive.LB,naive.UB)
newBounds[[i]]  <- cbind(sMat2[rok2,2],sMat2[rok2,3])
outMat[i,-c(1:5)] <- round(c(mean(sMat2[rok2,2],na.rm=T),median(sMat2[rok2,2],na.rm=T),mean(sMat2[rok2,2]>bMat2[i,1],na.rm=T),
mean(sMat2[rok2,3],na.rm=T),median(sMat2[rok2,3],na.rm=T),mean(sMat2[rok2,3]<bMat2[i,1],na.rm=T),
mean(sMat2[rok2,9],na.rm=T),median(sMat2[rok2,9],na.rm=T),mean(sMat2[rok2,9]>bMat2[i,1],na.rm=T),
mean(sMat2[rok2,10],na.rm=T),median(sMat2[rok2,10],na.rm=T),mean(sMat2[rok2,10]<bMat2[i,1],na.rm=T),
mean(naive.UB,na.rm=T),median(naive.UB,na.rm=T),mean(naive.UB<bMat2[i,1],na.rm=T),
mean(naive.LB,na.rm=T),median(naive.LB,na.rm=T),mean(naive.LB>bMat2[i,1],na.rm=T),
mean(sMat2[rok2,11],na.rm=T),median(sMat2[rok2,11],na.rm=T),mean(sMat2[rok2,11]>bMat2[i,1],na.rm=T),
mean(sMat2[rok2,12],na.rm=T),median(sMat2[rok2,12],na.rm=T),mean(sMat2[rok2,12]<bMat2[i,1],na.rm=T),
mean(sMat2[rok2,2]>0,na.rm=T),mean(sMat2[rok2,9]>0,na.rm=T),mean(sMat2[rok2,11]>0,na.rm=T),mean(sMat2[rok2,7]>0,na.rm=T)),3)
}
list("outMat"=outMat,"naiveBounds"=naiveBounds,"newBounds"=newBounds)
}
HPV <- createOut(poss.r,poss.p3,poss.p1,np1,np2,np3,10000,5000,1000,allData,comp)
SSS <- createOut(poss.rA,poss.p3A,poss.p1A,np1A,np2A,np3A,100,100,100,allData,comp)
SSS
write.table(HPV$outMat,quote=FALSE,row.names=FALSE,col.names=T,sep="\t",file="Y:/Projects/HPV/India/HPVTab.txt")
write.table(SSS$outMat,quote=FALSE,row.names=FALSE,col.names=T,sep="\t",file="Y:/Projects/HPV/India/SSSTab.txt")
poss.r=poss.rA
poss.p3=poss.p3A
poss.p1=poss.p1A
np1=np1A
np2=np2A
np3=np3A
n1=n2=n3=100
naiveBounds    <- list()
newBounds      <- list()
bMat3          <- matrix(nrow=(np1*np2*np3),ncol=3)
ri             <- 0
for (i in 1:np1) for (j in 1:np2) for (k in 1:np3) {ri=ri+1
bMat3[ri,] <- c(poss.r[i],poss.p3[j],poss.p1[k])}
bMat2          <- bMat3[bMat3[,3]< bMat3[,2] & !(bMat3[,2]==0.3 & bMat3[,3]==0.2),]
topLine <- c("r","pa","p3","p1","p2","LB:Avg",    "LB:Med",    "P(LB>T)",   "UB: Avg",    "UB: Med",     "P(UB>T)",
"LB.LRT:Avg","LB.LRT:Med","P(LB.LRT>T)","UB.LRT: Avg","UB.LRT: Med","P(UB.LRT<T)",
"LB.Naive:Avg","LB.Naive:Med","P(LB.Naive>T)","UB.Naive: Avg","UB.Naive: Med","P(UB.Naive<T)",
"LB.unCond:Avg","LB.unCond:Med","P(LB.unCond>T)","UB.unCond: Avg","UB.unCond: Med","P(UB.unCond<T)",
"Power","Power.LRT","Power.unCond","Power-DiffProp")
outMat <- matrix(nrow=nrow(bMat2),ncol=length(topLine))
colnames(outMat) <- topLine
outMat[,c(1,3,4)] <- bMat2
outMat[,2]        <-  outMat[,4]+outMat[,1]*outMat[,3]/2
outMat[,5]        <-  outMat[,2]+outMat[,1]*outMat[,3]/2
i=1
rok <- c(1:nrow(bMat))[bMat[,1] == bMat2[i,1] & bMat[,2] == bMat2[i,2] & bMat[,3] == bMat2[i,3] & comp == 1 & bMat[,5]==n1 & bMat[,6]==n2 & bMat[,7]==n3]
sMat2 <- allData[[rok[1]]]
for (j in 2:length(rok)) sMat2 <- rbind(sMat2,allData[[rok[j]]])
plot(sMat2[,3],sMat2[,10])
plot(sMat2[,3],sMat2[,10],xlim=c(-0.1,0.1),ylim=c(-0.1,0.1))
mean(sMat[,3]<0.0)
mean(sMat2[,3]<0.0)
mean(sMat2[,3]<0.0,na.rm=T)
mean(sMat2[,10]<0.0,na.rm=T)
mean(sMat2[!is.na(sMat2[,10]),3]<0.0,na.rm=T)
plot(sMat2[,3],sMat2[,10],xlim=c(-0.1,0.1),ylim=c(-0.1,0.1),xlab="UB.Score",ylab="UB.LRT")
c(1:nrow(sMat2))[sMat2[,3]> 0 & sMat2[,10] < 0 & !is.na(sMat2[,3]+sMat2[,10])]
roi <- (1:nrow(sMat2))[sMat2[,3]> 0 & sMat2[,10] < 0 & !is.na(sMat2[,3]+sMat2[,10])]
sMat2[roi,]
